class Solution {
    func longestPalindrome(_ s: String) -> String {
        var chars = s.randomAccessCharactersArray()
        var start: Int = 0
        var maxLength: Int = 0
        var i = 0, j = 0, k = 0
        
        if chars.count < 1{
            return s
        }
        
        while i < chars.count{
          // if there is no way to find a better maxLength, just break the loop
            guard chars.count - i > maxLength / 2 else{
                break
            }
            j = i
            k = i
            
            //loop through all the same letters, for example baaaaaaaaaa......aaab
            while k < chars.count - 1 && chars[k+1] == chars[k]{
                k += 1
            }
            
            i = k + 1
            
            //from the center, start to compare the left and right letter from the centre one by one
            while k < chars.count - 1 && j > 0 && chars[j-1] == chars[k+1]{
                j -= 1
                k += 1
            }
            
            //if the new palidrome has a greater length, change the maxLength and the starting position
            if maxLength < (k - j + 1){
                maxLength = k - j + 1
                start = j
            }

        }
        return s.substring(with: start..<(start+maxLength) )
    }
}

extension String {
    func index(from: Int) -> Index {
        return self.index(startIndex, offsetBy: from)
    }

    func substring(from: Int) -> String {
        let fromIndex = index(from: from)
        return substring(from: fromIndex)
    }

    func substring(to: Int) -> String {
        let toIndex = index(from: to)
        return substring(to: toIndex)
    }

    func substring(with r: Range<Int>) -> String {
        let startIndex = index(from: r.lowerBound)
        let endIndex = index(from: r.upperBound)
        return substring(with: startIndex..<endIndex)
    }
    
    //turn string into an array of characters
    func randomAccessCharactersArray() -> [Character] {
        return Array(self.characters)
    }
}

public class Solution {
private int lo, maxLen;

public String longestPalindrome(String s) {
	int len = s.length();
	if (len < 2)
		return s;
	
    for (int i = 0; i < len-1; i++) {
     	extendPalindrome(s, i, i);  //assume odd length, try to extend Palindrome as possible
     	extendPalindrome(s, i, i+1); //assume even length.
    }
    return s.substring(lo, lo + maxLen);
}

private void extendPalindrome(String s, int j, int k) {
	while (j >= 0 && k < s.length() && s.charAt(j) == s.charAt(k)) {
		j--;
		k++;
	}
	if (maxLen < k - j - 1) {
		lo = j + 1;
		maxLen = k - j - 1;
	}
}}
