class Solution {
    func longestValidParentheses(_ s: String) -> Int {
        let chars = [Character](s.characters)
        var longest = 0
        var stack = [Int]()
        
        for (i,char) in chars.enumerated(){
        //if char is opening bracket, or if the stack is empty, basically means that you cannot pop element
        //just append the meaningless ) into the stack
        //if the last element is ) and your character is also a ), append the ) to the stack
        
        
            if char == "(" || stack.isEmpty || chars[stack.last!] == ")"{
                stack.append(i)
            } else {
                let _ = stack.removeLast()
                if stack.isEmpty {
                    longest = max(longest, i + 1)
                } else {
                    longest = max(longest, i - stack.last!)
                }
            }
        }
        
        return longest
    }
}
